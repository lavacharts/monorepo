{"version":3,"sources":["../src/index.ts","../src/LavaJs.ts","../src/lib/utils.ts","../src/Binding.ts","../src/ChartProps.ts","../src/DataQuery.ts","../src/lib/datatable.ts","../src/Drawable.ts","../src/Chart.ts","../src/Dashboard.ts","../src/DefaultOptions.ts","../src/lib/GoogleLoader.ts","../src/lib/static-loader.ts","../src/lib/chart-fns.ts"],"sourcesContent":["import LavaJs, { lava } from \"./LavaJs\";\n\nexport { lava, LavaJs };\nexport * from \"./lib/chart-fns\";\n","import {\n  action,\n  makeObservable,\n  observable,\n  reaction,\n  trace,\n  when\n} from \"mobx\";\n\nimport { Binding } from \"./Binding\";\nimport { Chart } from \"./Chart\";\nimport { Dashboard } from \"./Dashboard\";\nimport { DefaultOptions } from \"./DefaultOptions\";\nimport { GoogleLoader } from \"./lib/GoogleLoader\";\nimport { debounce, domReady, makeDebugger } from \"./lib/utils\";\n\nimport type {\n  ChartSpec,\n  ChartWrapperSpec,\n  ControlWrapperSpec,\n  DashboardSpec,\n  LavaJsOptions,\n  OneOrArrayOf\n} from \"./types\";\n\nconst debug = makeDebugger(\"MainInstance\");\n\n/**\n * LavaJs - Google Chart API\n *\n * This module can be used as a standalone, browser based library, or in\n * conjunction with the PHP library Lavacharts\n *\n * @link https://github.com/kevinkhill/lavacharts\n */\nexport default class LavaJs {\n  /** Default options for the library */\n  static defaults = DefaultOptions;\n\n  /** Configurable options for the library */\n  options: LavaJsOptions;\n\n  /** Flag for when `window.google !== undefined` */\n  googleReady = false;\n\n  /** Flag for when `document.readyState === \"complete\"` */\n  domReady = false;\n\n  /** Flag for when all resources are loaded to draw */\n  readyToDraw = false;\n\n  /** Chart registry */\n  readonly registry: Record<string, Chart | Dashboard> = {};\n\n  /** Loader for adding the google script and making `window.google` available */\n  private readonly loader: GoogleLoader;\n\n  /**\n   * Create a new instance of the LavaJs library\n   *\n   * When creating an instance of LavaJs, the default behavior is\n   * to check if `window.google !== undefined` and if so, then we\n   * start the [[GoogleLoader]].\n   *\n   * The [[GoogleLoader]] will check the <head> for the\n   * google static loader and if not found, inject it into the <head>.\n   *\n   * @emits [[Events.GOOGLE_READY]]\n   * @emits [[Events.DRAW]]\n   */\n  constructor(options?: Partial<LavaJsOptions>) {\n    makeObservable(this, {\n      domReady: observable,\n      readyToDraw: observable,\n      toggleDomReady: action,\n      toggleReadyToDraw: action\n    });\n\n    this.options = {\n      ...DefaultOptions,\n      ...options\n    };\n\n    debug(`Initializing LavaJs`, this.options);\n\n    this.loader = new GoogleLoader({ language: this.options.language });\n\n    if (this.options.responsive === true) {\n      this.attachResizeHandler();\n    }\n\n    if (this.options.autoloadGoogle) {\n      reaction(\n        () => this.loader.googleIsDefined,\n        () => {\n          trace();\n          debug(\"this.loader.googleIsDefined\");\n          this.toggleReadyToDraw();\n        }\n      );\n      this.loader.loadGoogle();\n    }\n\n    const disposer = when(\n      () => this.loader.googleReady && this.domReady,\n      () => {\n        if (this.options.autodraw) {\n          debug(\"reacting to this.readyToDraw.\");\n          this.draw();\n          disposer();\n        }\n      }\n    );\n\n    domReady().then(() => {\n      debug(`DOM Ready.`);\n      this.toggleDomReady();\n    });\n  }\n\n  // mobx Action\n  toggleDomReady() {\n    this.domReady = !this.domReady;\n  }\n\n  // mobx Action\n  toggleReadyToDraw() {\n    this.readyToDraw = !this.readyToDraw;\n  }\n\n  /**\n   * Get the instance of the GoogleLoader\n   */\n  getLoader(): GoogleLoader {\n    return this.loader;\n  }\n\n  /**\n   * Get the value of an option from the library\n   */\n  getOption<T extends keyof LavaJsOptions>(option: T): LavaJsOptions[T] {\n    if (typeof this.options[option] === \"undefined\") {\n      throw new Error(`${String(option)} is not a valid option`);\n    }\n\n    return this.options[option];\n  }\n\n  /**\n   * Override the default options of the module.\n   */\n  configure(options: LavaJsOptions): this {\n    this.options = {\n      ...this.options,\n      ...options\n    };\n\n    return this;\n  }\n\n  /**\n   * Wait for the DOM to be ready then draw ^_^\n   *\n   * If passed a single chart object, then you can skip the `lava.chart()`\n   * call and draw a chart with only one method call!\n   *\n   * You can even pass an array of chart objects!!\n   *\n   * @emits [[Events.DRAW]]\n   */\n  async draw(): Promise<void> {\n    await domReady();\n\n    Object.values(this.registry).forEach(chart => {\n      debug(`Drawing ${chart.id}`);\n      chart.draw();\n    });\n  }\n\n  /**\n   * Create a new [[Chart]] from an Object\n   */\n  chart(payload: ChartSpec<any>): Chart {\n    const chart = new Chart(payload);\n\n    debug(`Registering ${chart.id}`);\n\n    return this.register(chart);\n  }\n\n  /**\n   * Create multiple [[Chart]]s from an array of Objects\n   */\n  charts(charts: ChartSpec[]): void {\n    charts.forEach(def => this.chart(def));\n  }\n\n  /**\n   * Create a new [[Dashboard]] from an Object\n   */\n  dashboard(payload: DashboardSpec): Dashboard {\n    const dashboard = new Dashboard(payload);\n\n    return this.register(dashboard);\n  }\n\n  /**\n   * Create [[Dashboard]] [[Binding]]s\n   *\n   * Depending on the parameters, 4 different bindings can be produced:\n   * - bind(control  , chart  ) => OneToOne Binding\n   * - bind(control[], chart  ) => ManyToOne Binding\n   * - bind(control  , chart[]) => OneToMany Binding\n   * - bind(control[], chart[]) => ManyToMany Binding\n   */\n  bind(\n    controlWraps: OneOrArrayOf<ControlWrapperSpec>,\n    chartWraps: OneOrArrayOf<ChartWrapperSpec>\n  ): Binding {\n    return Binding.create(controlWraps, chartWraps);\n  }\n\n  /**\n   * Create an empty [[Binding]] to use as a builder.\n   *\n   * The binding provides the methods which both return `this` for chaining\n   *  - addChart() to push a chartWrapper into the binding\n   *  - addControl() to push a controlWrapper into the binding\n   *\n   *  @example ```\n   * const oneToOneBinding = lava.binding().addControl({}).addChart({});\n   * ```\n   */\n  binding(): Binding {\n    return new Binding();\n  }\n\n  /**\n   * Register a [[Drawable]] with the module.\n   *\n   * The registry keeps a record of all created charts, which enables\n   * the event firing through the common interface of `window.lava`\n   */\n  private register<T extends Chart | Dashboard>(drawable: T): T {\n    debug(`Registering ${drawable.id} packages with the Google Loader`);\n\n    this.loader.register(drawable);\n\n    this.registry[drawable.id] = drawable;\n\n    return drawable;\n  }\n\n  /**\n   * Attach a listener to the window resize event for redrawing the charts.\n   */\n  private attachResizeHandler() {\n    window.addEventListener(\n      \"resize\",\n      debounce(() => {\n        debug(`Window re-sized, redrawing...`);\n        this.draw();\n      }, this.options.debounceTimeout)\n    );\n  }\n}\n\nexport const lava = new LavaJs();\n","import type { Dashboard } from \"../Dashboard\";\nimport type { DataQuery } from \"../DataQuery\";\nimport type { Drawable } from \"../Drawable\";\nimport type { RangeQuery } from \"../types\";\n\n/**\n * Wrapper for turning single items into arrays\n */\nexport function box<T>(data: T | T[]): T[] {\n  return Array.isArray(data) ? data : [data];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function instanceOfRangeQuery(object: any): object is RangeQuery {\n  return object?.sheetId && object?.range;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function instanceOfDataQuery(object: any): object is DataQuery {\n  return object?.send && object?.getDataTable;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function instanceOfDashboard(object: any): object is Dashboard {\n  return object?.draw && object?.bindings;\n}\n\n/**\n * Retrieve the container element from the document\n */\nexport function getContainer({ id, containerId }: Drawable): HTMLElement {\n  const container = document.getElementById(containerId);\n\n  if (container === null) {\n    throw new Error(\n      `${id} tried to render into the target element \"${containerId}\", but this was not found in page.`\n    );\n  }\n\n  return container;\n}\n\n/**\n * Prefixing the console logger\n */\nexport function makeDebugger(ns: string) {\n  return (...rest: unknown[]) => console.log(`[LAVAJS] (${ns}):`, ...rest);\n}\n\n/**\n * Promise for the DOM to be ready.\n */\nexport async function domReady(): Promise<void> {\n  return new Promise(resolve => {\n    if ([\"interactive\", \"complete\"].includes(document.readyState)) {\n      resolve();\n    } else {\n      document.addEventListener(\"DOMContentLoaded\", () => resolve());\n    }\n  });\n}\n\n/**\n * Function for dynamically creating new google classes\n */\nexport const newGoogleClass = (\n  googleInstance: typeof google,\n  className: string,\n  ...restArgs: any[]\n) => {\n  const { visualization } = googleInstance;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const googleClass = (visualization as any)[className];\n\n  if (restArgs) {\n    return new googleClass(...restArgs);\n  } else {\n    return new googleClass();\n  }\n};\n\n/**\n * Function for dynamically creating new google classes\n */\nexport async function googleClassFactory(\n  googleInstance: typeof google,\n  className: string,\n  ...restArgs: unknown[]\n) {\n  return new Promise(resolve => {\n    resolve(newGoogleClass(googleInstance, className, ...restArgs));\n  });\n}\n\n/**\n * Simple debouncer for the resize handler\n */\nexport function debounce(fn: () => void, delay: number) {\n  let timer: NodeJS.Timeout;\n  return () => {\n    clearTimeout(timer);\n    timer = setTimeout(() => fn(), delay);\n  };\n}\n","import { lava } from \"./LavaJs\";\nimport { box, newGoogleClass } from \"./lib/utils\";\nimport { ChartWrapperSpec, ControlWrapperSpec } from \"./types/wrapper\";\n\nimport type { OneOrArrayOf } from \"./types\";\n\ntype BindingType = \"OneToOne\" | \"OneToMany\" | \"ManyToOne\" | \"ManyToMany\";\n\nexport class Binding {\n  private controlWraps: ControlWrapperSpec[] = [];\n  private chartWraps: ChartWrapperSpec[] = [];\n\n  static create(\n    controlWraps: OneOrArrayOf<ControlWrapperSpec>,\n    chartWraps: OneOrArrayOf<ChartWrapperSpec>\n  ): Binding {\n    return new Binding(controlWraps, chartWraps);\n  }\n\n  get type(): BindingType {\n    const manyControlWraps = Array.isArray(this.controlWraps);\n    const oneControlWrap = !manyControlWraps;\n\n    const manyChartWraps = Array.isArray(this.chartWraps);\n    const oneChartWrap = !manyChartWraps;\n\n    if (oneControlWrap && oneChartWrap) return \"OneToOne\";\n    else if (oneControlWrap && manyChartWraps) return \"OneToMany\";\n    else if (manyControlWraps && oneChartWrap) return \"ManyToOne\";\n    else return \"ManyToMany\";\n  }\n\n  constructor(\n    controlWraps?: ControlWrapperSpec | ControlWrapperSpec[],\n    chartWraps?: ChartWrapperSpec | ChartWrapperSpec[]\n  ) {\n    if (controlWraps) {\n      this.controlWraps.push(...box(controlWraps));\n    }\n\n    if (chartWraps) {\n      this.chartWraps.push(...box(chartWraps));\n    }\n  }\n\n  public addControl(controlDef: ControlWrapperSpec): this {\n    this.controlWraps.push(controlDef);\n\n    return this;\n  }\n\n  public addChart(chartDef: ChartWrapperSpec): this {\n    this.chartWraps.push(chartDef);\n\n    return this;\n  }\n\n  public async getControlWraps(): Promise<\n    google.visualization.ControlWrapper[]\n  > {\n    const google = await lava.getLoader().loadGoogle();\n\n    if (this.controlWraps.length === 1) {\n      return newGoogleClass(google, \"ControlWrapper\", ...this.controlWraps);\n    }\n\n    return Promise.all(\n      this.controlWraps.map(control =>\n        newGoogleClass(google, \"ControlWrapper\", control)\n      )\n    );\n  }\n\n  public async getChartWraps(): Promise<google.visualization.ChartWrapper[]> {\n    const google = await lava.getLoader().loadGoogle();\n\n    if (this.chartWraps.length === 1) {\n      return newGoogleClass(google, \"ChartWrapper\", ...this.chartWraps);\n    }\n\n    return Promise.all(\n      this.chartWraps.map(chart =>\n        newGoogleClass(google, \"ChartWrapper\", chart)\n      )\n    );\n  }\n}\n","import { Chart } from \"./Chart\";\n\nimport type { ChartClasses, ChartTypes } from \"./types/chart\";\n\nenum VisualizationPropertyEnum {\n  \"CLASS\",\n  \"PACKAGE\",\n  \"VERSION\"\n}\n\ntype VisualizationPropertyMap = {\n  [K in ChartTypes]: [ChartClasses, string, number];\n};\n\nconst CHART_PROPS = {\n  AnnotationChart: [\"AnnotationChart\", \"annotationchart\", 1],\n  AreaChart: [\"AreaChart\", \"corechart\", 1],\n  BarChart: [\"BarChart\", \"corechart\", 1],\n  BubbleChart: [\"BubbleChart\", \"corechart\", 1],\n  CalendarChart: [\"Calendar\", \"calendar\", 1],\n  CandlestickChart: [\"CandlestickChart\", \"corechart\", 1],\n  ColumnChart: [\"ColumnChart\", \"corechart\", 1],\n  ComboChart: [\"ComboChart\", \"corechart\", 1],\n  DonutChart: [\"PieChart\", \"corechart\", 1],\n  GanttChart: [\"Gantt\", \"gantt\", 1],\n  GaugeChart: [\"Gauge\", \"gauge\", 1],\n  GeoChart: [\"GeoChart\", \"geochart\", 1],\n  HistogramChart: [\"Histogram\", \"corechart\", 1],\n  LineChart: [\"LineChart\", \"corechart\", 1],\n  PieChart: [\"PieChart\", \"corechart\", 1],\n  SankeyChart: [\"Sankey\", \"sankey\", 1],\n  ScatterChart: [\"ScatterChart\", \"corechart\", 1],\n  SteppedAreaChart: [\"SteppedAreaChart\", \"corechart\", 1],\n  TableChart: [\"Table\", \"table\", 1],\n  TimelineChart: [\"Timeline\", \"timeline\", 1],\n  TreeMapChart: [\"TreeMap\", \"treemap\", 1],\n  WordTreeChart: [\"WordTree\", \"wordtree\", 1]\n} as VisualizationPropertyMap;\n\nexport function isSupported(chartType: ChartTypes): boolean {\n  return Object.keys(CHART_PROPS).includes(chartType);\n}\n\nexport function getChartClass(chart: Chart): ChartClasses {\n  return CHART_PROPS[chart.type][VisualizationPropertyEnum.CLASS];\n}\n\nexport function getChartPackage(chart: Chart): string {\n  return CHART_PROPS[chart.type][VisualizationPropertyEnum.PACKAGE];\n}\n\nexport function getChartVersion(chart: Chart): number {\n  return CHART_PROPS[chart.type][VisualizationPropertyEnum.VERSION];\n}\n","import { lava } from \"./LavaJs\";\nimport { makeDebugger, newGoogleClass } from \"./lib/utils\";\n\nimport type { QueryTransformer, RangeQuery } from \"./types\";\n\nconst debug = makeDebugger(\"DataQuery\");\n\n/**\n * Used for loading remote data as a {@link DataTable}\n *\n * @see https://developers.google.com/chart/interactive/docs/reference#Query\n */\nexport class DataQuery {\n  /**\n   * Compose a DataQuery based on a URL to a Google Sheet\n   *\n   * Pass a Google Sheet ID and range in A1 notation\n   * to create a URL to use with a [[DataQuery]]\n   */\n  public static createFromSheetRange({\n    sheetId,\n    range\n  }: RangeQuery): DataQuery {\n    const base = \"https://docs.google.com/spreadsheets/d\";\n\n    return new DataQuery(`${base}/${sheetId}/gviz/tq?range=${range}`);\n  }\n\n  /**\n   * Create a new DataQuery for a DataTable\n   *\n   * @throws {Error}\n   */\n  constructor(\n    public url: string,\n    public opts: google.visualization.QueryOptions = { sendMethod: \"auto\" },\n    public transformer?: QueryTransformer\n  ) {\n    this.url = url;\n    this.opts = opts;\n\n    if (transformer) {\n      this.transformer = transformer;\n    }\n  }\n\n  /**\n   * Send the query and fetch the DataTable\n   */\n  public async getDataTable(): Promise<google.visualization.DataTable> {\n    debug(\"Sending DataQuery\");\n\n    const response = await this.send();\n\n    debug(\"Response received\");\n    debug(response);\n\n    return response.getDataTable();\n  }\n\n  /**\n   * Send the DataQuery\n   */\n  public async send(): Promise<google.visualization.QueryResponse> {\n    const google = await lava.getLoader().loadGoogle();\n\n    let query = await newGoogleClass(google, \"Query\", this.url, this.opts);\n\n    if (this.transformer) {\n      query = this.transformer(query);\n    }\n\n    return new Promise((resolve, reject) => {\n      debug(`Requesting ${this.url}`);\n\n      query.send((response: google.visualization.QueryResponse) => {\n        if (response.isError()) {\n          reject(response);\n        }\n\n        resolve(response);\n      });\n    });\n  }\n}\n","import { lava } from \"../LavaJs\";\nimport { instanceOfDataQuery, newGoogleClass } from \"./utils\";\n\n/**\n * Sets the data for the chart by creating a new DataTable\n */\nexport async function createDataTable(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  payload: any\n): Promise<google.visualization.DataTable> {\n  const google = await lava.getLoader().loadGoogle();\n\n  // If this is a DataQuery, then send it!\n  if (instanceOfDataQuery(payload)) {\n    return payload.getDataTable();\n  }\n\n  // If a function is received, then create an new DataTable and pass it to the\n  // function for user modifications.\n  if (typeof payload === \"function\") {\n    const emptyTable = await newGoogleClass(google, \"DataTable\");\n\n    // Return a fresh table to the payload as a callback\n    return payload(emptyTable);\n  }\n\n  // If an Array is received, then attempt to use parse with arrayToDataTable.\n  if (Array.isArray(payload)) {\n    return google.visualization.arrayToDataTable(payload);\n  }\n\n  // Since Google compiles their classes, we can't use instanceof to check since\n  // it is no longer called a \"DataTable\" (it's \"gvjs_P\" but that could change...)\n  // If this check passes, then it already is a DataTable\n  if (typeof payload.getTableProperties === \"function\") {\n    return payload;\n  }\n\n  // If the payload is from the php class JoinedDataTable->toJson(), then create\n  // two new DataTables and join them with the defined options.\n  if (\"data\" in payload) {\n    if (Array.isArray(payload.data)) {\n      return google.visualization.data.join(\n        newGoogleClass(google, \"DataTable\", payload.data[0]),\n        newGoogleClass(google, \"DataTable\", payload.data[1]),\n        payload.keys,\n        payload.joinMethod,\n        payload.dt1Columns,\n        payload.dt2Columns\n      );\n    }\n\n    // If a php DataTable->toJson() payload is received, with formatted columns,\n    // then payload.data will be defined. Use this to create the DataTable.\n    if (typeof payload.data === \"object\") {\n      // eslint-disable-next-line no-param-reassign\n      payload = payload.data;\n    }\n  }\n\n  // If we reach here, then it must be standard JSON for creating a DataTable.\n  return newGoogleClass(google, \"DataTable\", payload);\n}\n","import { DataQuery } from \"./DataQuery\";\nimport { createDataTable } from \"./lib/datatable\";\nimport {\n  getContainer,\n  instanceOfRangeQuery,\n  makeDebugger,\n  newGoogleClass\n} from \"./lib/utils\";\n\nimport type {\n  ChartEvents,\n  ChartUpdateReturn,\n  ConsoleLog,\n  DrawableSpec,\n  Formatter,\n  OptionDataPayload,\n  UnknownObject\n} from \"./types\";\n\n/**\n * Base class for [[Chart]]s and [[Dashboard]]s\n */\nexport abstract class Drawable {\n  /**\n   * Configurable options\n   */\n  public options: UnknownObject = {};\n\n  /**\n   * DataTable for the [[Drawable]]\n   */\n  public data!: google.visualization.DataTable;\n\n  /**\n   * Google chart object created once the [[Drawable]] has been rendered\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public googleChart!: any;\n\n  /**\n   * Unique identifier for the [[Drawable]]\n   */\n  public get id(): string {\n    return `${this.type}::${this.label}`;\n  }\n\n  /**\n   * Element ID of the DOM node for the container\n   */\n  public readonly containerId: string;\n\n  /**\n   * Unique label for the [[Drawable]]\n   */\n  public readonly label: string;\n\n  /**\n   * Type of [[Drawable]]\n   */\n  public readonly type: DrawableSpec[\"type\"];\n\n  /**\n   * Formatters for the DataTable\n   */\n  protected formats: Formatter[] = [];\n\n  /**\n   * Event listeners for the Drawable\n   */\n  protected events: Partial<Record<ChartEvents, CallableFunction>> = {};\n\n  /**\n   * The initial source of data for the DataTable\n   */\n  protected initialData?: DataQuery | unknown[] | UnknownObject;\n\n  protected debug: ConsoleLog;\n\n  abstract getGoogleConstructor(): string;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(drawable: DrawableSpec<any>) {\n    this.containerId = drawable.containerId;\n    this.type = drawable.type || \"Dashboard\";\n\n    if (\"label\" in drawable) {\n      this.label = drawable.label;\n    } else {\n      this.label = this.containerId;\n    }\n\n    if (instanceOfRangeQuery(drawable.data)) {\n      this.initialData = DataQuery.createFromSheetRange(drawable.data);\n    } else {\n      this.initialData = drawable.data;\n    }\n\n    if (drawable.options) {\n      this.options = drawable.options;\n    }\n\n    if (drawable.events) {\n      this.events = drawable.events;\n    }\n\n    if (drawable.formats) {\n      this.formats = drawable.formats;\n    }\n\n    this.debug = makeDebugger(`${this.id}`);\n  }\n\n  async handleGoogle(): Promise<void> {\n    const google = window.google;\n\n    const chartClass = this.getGoogleConstructor();\n    const container = getContainer(this);\n\n    this.googleChart = newGoogleClass(google, chartClass, container);\n\n    if (this.formats) {\n      this.applyFormats();\n    }\n\n    const definedEvents = Object.keys(this.events) as ChartEvents[];\n\n    definedEvents.forEach(eventType => {\n      const { addListener } = google.visualization.events;\n      const handler = this.events[eventType];\n\n      if (typeof handler === \"function\") {\n        addListener(this.googleChart, eventType, (event: unknown) => {\n          handler({\n            event,\n            $this: this,\n            data: this.data,\n            chart: this.googleChart\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * Draws the [[Drawable]] with the predefined data and options.\n   */\n  public async draw(): Promise<void> {\n    this.debug(`in super.draw()`);\n\n    await this.handleGoogle();\n\n    if (\"initialData\" in this) {\n      await this.processInitialData();\n    }\n\n    if (this.formats) {\n      this.applyFormats();\n    }\n\n    this.googleChart.draw(this.data, this.options);\n  }\n\n  /**\n   * Overriding the `on()` method from [[TinyEmitter]] to\n   * register the handlers to our own map.\n   */\n  public on(event: ChartEvents, handler: () => unknown, ctx?: unknown): this {\n    this.debug(`Attaching <${event}> handler`);\n\n    if (ctx) {\n      // eslint-disable-next-line no-param-reassign\n      handler = handler.bind(ctx);\n    }\n\n    this.events[event] = handler;\n\n    return this;\n  }\n\n  /**\n   * Sugar method for setting options via string reference\n   */\n  public async set(\n    optionRef: string,\n    value: unknown\n  ): Promise<ChartUpdateReturn> {\n    // if (optionRef.includes(\".\")) {\n    //   const options = optionRef.split(\".\");\n    // }\n\n    const payload = {\n      [optionRef]: value\n    };\n\n    this.updateOptions(payload);\n\n    return {\n      data: this.data,\n      chart: this.googleChart,\n      options: this.options\n    };\n  }\n\n  /**\n   * Sugar method for updating the chart's data directly\n   */\n  public async updateData(\n    payload: UnknownObject,\n    autoRedraw = true\n  ): Promise<ChartUpdateReturn> {\n    return this.update({ data: payload }, autoRedraw);\n  }\n\n  /**\n   * Sugar method for updating the chart's options directly\n   */\n  public updateOptions(\n    payload: UnknownObject,\n    autoRedraw = true\n  ): Promise<ChartUpdateReturn> {\n    return this.update({ options: payload }, autoRedraw);\n  }\n\n  /**\n   * Plumbing method Update a chart's options and/or data\n   *\n   * The chart will redraw if the `autoRedraw` option is set.\n   * default: `true`\n   */\n  public async update(\n    { data, options }: OptionDataPayload,\n    autoRedraw = true\n  ): Promise<ChartUpdateReturn> {\n    if (typeof options !== \"undefined\") {\n      this.debug(\"Setting options\", options);\n      this.options = Object.assign(this.options, options);\n    }\n\n    if (typeof data !== \"undefined\") {\n      this.debug(\"Setting data\", data);\n      this.setData(data);\n    }\n\n    if (autoRedraw === true) {\n      await this.draw();\n    }\n\n    return {\n      data: this.data,\n      chart: this.googleChart,\n      options: this.options\n    };\n  }\n\n  /**\n   * Apply the formats to the DataTable\n   */\n  public applyFormats(formats?: Formatter[]): void {\n    if (formats) {\n      this.formats = formats;\n    }\n\n    for (const format of this.formats) {\n      const formatter = new window.google.visualization[format.type](\n        format.options\n      );\n\n      this.debug(`Formatting column [${format.index}]`, format);\n\n      formatter.format(this.data, format.index);\n    }\n  }\n\n  /**\n   * Send the [[DataQuery]] if it is one, otherwise create a DataTable\n   */\n  protected async processInitialData(): Promise<void> {\n    this.debug(\"Setting initial data\", this.initialData);\n\n    if (typeof this.initialData !== \"undefined\") {\n      const data =\n        typeof this.initialData === \"string\"\n          ? new DataQuery(this.initialData)\n          : this.initialData;\n\n      await this.setData(data);\n\n      delete this.initialData;\n    }\n  }\n\n  /**\n   * Sets the [[DataTable]] for the [[Drawable]].\n   */\n  protected async setData(\n    payload: Parameters<typeof createDataTable>[0]\n  ): Promise<void> {\n    this.data = await createDataTable(payload);\n\n    /**\n     * Instead of checking and re-throwing, lets let Google fail...\n     *\n     * @TODO does this work?\n     */\n    // if (this.data instanceof google.visualization.DataTable === false) {\n    //   throw new Error(`There was a error setting the data for ${this.id}`);\n    // }\n\n    if (payload.formats) {\n      this.applyFormats(payload.formats);\n    }\n  }\n}\n","import { getChartClass } from \"./ChartProps\";\nimport { Drawable } from \"./Drawable\";\nimport { getContainer } from \"./lib/utils\";\n\nimport type { ChartClasses, ChartSpec, ChartTypes } from \"./types\";\n\nexport class Chart extends Drawable {\n  /**\n   * If this is set to true, then the [[Chart]]\n   * will be drawn and converted to a PNG\n   */\n  public png = false;\n\n  /** The google.visualization type */\n  public readonly type: ChartTypes;\n\n  /** Static creation method */\n  static create(chart: ChartSpec): Chart {\n    return new Chart(chart);\n  }\n\n  constructor(chart: ChartSpec) {\n    super(chart);\n\n    this.type = chart.type;\n    this.png = Boolean(chart.png);\n  }\n\n  /**\n   * Get the Google Class for creating a new {@link Chart} instance\n   */\n  public getGoogleConstructor(): ChartClasses {\n    return getChartClass(this);\n  }\n\n  /**\n   * Draw the chart\n   */\n  public async draw(): Promise<void> {\n    await super.draw();\n\n    if (this.png) this.replaceWithPng();\n  }\n\n  /**\n   * Draws the chart as a PNG instead of the standard SVG\n   *\n   * @see https://developers.google.com/chart/interactive/docs/printing\n   */\n  private replaceWithPng(): void {\n    const container = getContainer(this);\n    const img = document.createElement(\"img\");\n\n    img.src = this.googleChart.getImageURI();\n\n    container.innerHTML = \"\";\n    container.appendChild(img);\n  }\n}\n","import { Binding } from \"./Binding\";\nimport { Drawable } from \"./Drawable\";\n\nimport type { DashboardSpec } from \"./types\";\n\nexport class Dashboard extends Drawable {\n  public bindings: Binding[];\n\n  public needsBindings = true;\n\n  constructor(payload: DashboardSpec) {\n    super(payload);\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error\n    this.bindings = payload.bindings;\n  }\n\n  /**\n   * Get the Google Class for creating a new {@link Dashboard} instance\n   */\n  public getGoogleConstructor() {\n    return \"Dashboard\" as const;\n  }\n\n  /**\n   * Draw the {@link Dashboard}\n   */\n  public async draw(): Promise<void> {\n    if (this?.initialData) {\n      await this.processInitialData();\n    }\n\n    // this.googleChart = await AsyncGoogleFactory(\n    //   this.getGoogleConstructor(),\n    //   getContainer(this.containerId)\n    // );\n\n    if (this.bindings.length > 0) {\n      for (const binding of this.bindings) {\n        this.googleChart.bind(\n          await binding.getControlWraps(),\n          await binding.getChartWraps()\n        );\n      }\n    }\n\n    this.googleChart.draw(this.data);\n  }\n}\n","import type { LavaJsOptions } from \"./types\";\n\nexport const DefaultOptions = {\n  autodraw: true,\n  autoloadGoogle: true,\n  chartPackages: [\"corechart\"],\n  // datetimeFormat: \"\",\n  debounceTimeout: 500,\n  debug: false,\n  language: \"en\",\n  mapsApiKey: \"\",\n  responsive: true,\n  timezone: \"America/Los_Angeles\"\n} as LavaJsOptions;\n","import { action, makeObservable, observable } from \"mobx\";\n\nimport { Chart } from \"../Chart\";\nimport { getChartPackage } from \"../ChartProps\";\nimport { Dashboard } from \"../Dashboard\";\nimport { instanceOfDashboard, makeDebugger } from \"../lib/utils\";\nimport { injectStaticLoader } from \"./static-loader\";\n\nimport type { GoogleHandler, GoogleLoaderOptions } from \"../types\";\n\nconst debug = makeDebugger(\"GoogleLoader\");\n\nexport class GoogleLoader {\n  /**\n   * Version of the Google charts API to load\n   */\n  static API_VERSION = \"current\"; //\n\n  /**\n   * Url to Google's static loader\n   */\n  static LOADER_URL = \"https://www.gstatic.com/charts/loader.js\";\n\n  /**\n   * Observable prop for when the library is ready to draw charts\n   */\n  googleReady = false;\n\n  /**\n   * Packages to load\n   */\n  packages: Set<string> = new Set([\"corechart\"]);\n\n  /**\n   * Language to load\n   */\n  private language: string;\n\n  /**\n   * API Key if using GeoCharts\n   */\n  private mapsApiKey: string;\n\n  /**\n   * Create a new instance of the GoogleLoader\n   *\n   * @param options LavaJsOptions\n   */\n  constructor({ language = \"en\", mapsApiKey = \"\" }: GoogleLoaderOptions) {\n    makeObservable(this, {\n      googleReady: observable,\n      toggleGoogleReady: action\n    });\n\n    this.language = language;\n    this.mapsApiKey = mapsApiKey;\n\n    // if (options.enableEditor) {\n    //   this.packages.add(\"charteditor\");\n    // }\n  }\n\n  toggleGoogleReady() {\n    this.googleReady = !this.googleReady;\n  }\n\n  /**\n   * Flag that will be true once window.google is available in page.\n   */\n  get googleIsDefined(): boolean {\n    return typeof window.google !== \"undefined\";\n  }\n\n  /**\n   * Flag that will be true once Google's Static Loader is in page.\n   */\n  get scriptTagInPage(): boolean {\n    const scripts = document.getElementsByTagName(\"script\");\n\n    return Array.from(scripts)\n      .map(script => script.src)\n      .includes(GoogleLoader.LOADER_URL);\n  }\n\n  /**\n   * Get the options for the google loader.\n   */\n  get config(): GoogleLoaderOptions {\n    const config: GoogleLoaderOptions = {\n      language: this.language,\n      packages: Array.from(this.packages)\n    };\n\n    if (this.mapsApiKey !== \"\") {\n      config.mapsApiKey = this.mapsApiKey;\n    }\n\n    return config;\n  }\n\n  /**\n   * Extract and register the package needed to draw the chart.\n   */\n  register(drawable: Chart | Dashboard): void {\n    if (instanceOfDashboard(drawable)) {\n      this.packages.add(\"controls\");\n    } else {\n      this.packages.add(getChartPackage(drawable));\n    }\n  }\n\n  /**\n   * Load the Google Static Loader and resolve the promise when ready.\n   */\n  async loadGoogle(): Promise<typeof google> {\n    debug(\"Loading Google...\");\n\n    await injectStaticLoader(document.head);\n\n    return new Promise(resolve => {\n      debug(`Loading version \"${GoogleLoader.API_VERSION}\"`, this.config);\n\n      window.google.charts.load(GoogleLoader.API_VERSION, this.config);\n      window.google.charts.setOnLoadCallback(() => {\n        debug(`window.google is ready.`);\n        this.toggleGoogleReady();\n        resolve(window.google);\n      });\n    });\n  }\n}\n","import { ScriptElement } from \"../types/core\";\nimport { GoogleLoader } from \"./GoogleLoader\";\nimport { makeDebugger } from \"./utils\";\n\nconst debug = makeDebugger(\"StaticLoader\");\n\n/**\n * Create a new script tag for the Google Static Loader\n */\nexport async function injectStaticLoader(target: Node): Promise<void> {\n  if (typeof window.google !== \"undefined\") {\n    debug(\"window.google is defined; skipping script injection.\");\n    return;\n  } else {\n    debug(\"building script tag for the static loader.\");\n    return new Promise(resolve => {\n      const script = document.createElement(\"script\") as ScriptElement;\n\n      script.type = \"text/javascript\";\n      script.defer = true;\n      script.src = GoogleLoader.LOADER_URL;\n      script.onload = script.onreadystatechange = (event: Event) => {\n        // eslint-disable-next-line no-param-reassign\n        event = event || window.event;\n\n        if (\n          event.type === \"load\" ||\n          /loaded|complete/.test(script.readyState)\n        ) {\n          script.onload = script.onreadystatechange = null;\n          debug(\"Google static loader is ready.\");\n          resolve();\n        }\n      };\n\n      target.appendChild(script);\n    });\n  }\n}\n","import { lava } from \"../LavaJs\";\n\nimport type { Chart } from \"../Chart\";\nimport type { ChartSpecWithOptions } from \"../types\";\n\nexport function AnnotationChart(\n  config: ChartSpecWithOptions<google.visualization.AnnotationChartOptions>\n): Chart {\n  return lava.chart({ type: \"AnnotationChart\", ...config });\n}\n\nexport function AreaChart(\n  config: ChartSpecWithOptions<google.visualization.AreaChartOptions>\n): Chart {\n  return lava.chart({ type: \"AreaChart\", ...config });\n}\n\nexport function BarChart(\n  config: ChartSpecWithOptions<google.visualization.BarChartOptions>\n): Chart {\n  return lava.chart({ type: \"BarChart\", ...config });\n}\n\nexport function BubbleChart(\n  config: ChartSpecWithOptions<google.visualization.BubbleChartOptions>\n): Chart {\n  return lava.chart({ type: \"BubbleChart\", ...config });\n}\n\nexport function CalendarChart(\n  config: ChartSpecWithOptions<google.visualization.CalendarOptions>\n): Chart {\n  return lava.chart({ type: \"CalendarChart\", ...config });\n}\n\nexport function CandlestickChart(\n  config: ChartSpecWithOptions<google.visualization.CandlestickChartOptions>\n): Chart {\n  return lava.chart({ type: \"CandlestickChart\", ...config });\n}\n\nexport function ColumnChart(\n  config: ChartSpecWithOptions<google.visualization.ColumnChartOptions>\n): Chart {\n  return lava.chart({ type: \"ColumnChart\", ...config });\n}\n\nexport function ComboChart(\n  config: ChartSpecWithOptions<google.visualization.ComboChartOptions>\n): Chart {\n  return lava.chart({ type: \"ComboChart\", ...config });\n}\n\nexport function DonutChart(\n  config: ChartSpecWithOptions<google.visualization.PieChartOptions>\n): Chart {\n  return lava.chart({ type: \"DonutChart\", ...config });\n}\n\nexport function GanttChart(\n  config: ChartSpecWithOptions<google.visualization.GanttChartOptions>\n): Chart {\n  return lava.chart({ type: \"GanttChart\", ...config });\n}\n\nexport function GaugeChart(\n  config: ChartSpecWithOptions<google.visualization.GaugeChartOptions>\n): Chart {\n  return lava.chart({ type: \"GaugeChart\", ...config });\n}\n\nexport function GeoChart(\n  config: ChartSpecWithOptions<google.visualization.GeoChartOptions>\n): Chart {\n  return lava.chart({ type: \"GeoChart\", ...config });\n}\n\nexport function HistogramChart(\n  config: ChartSpecWithOptions<google.visualization.HistogramHistogramOptions>\n): Chart {\n  return lava.chart({ type: \"HistogramChart\", ...config });\n}\n\nexport function LineChart(\n  config: ChartSpecWithOptions<google.visualization.LineChartOptions>\n): Chart {\n  return lava.chart({ type: \"LineChart\", ...config });\n}\n\nexport function PieChart(\n  config: ChartSpecWithOptions<google.visualization.PieChartOptions>\n): Chart {\n  return lava.chart({ type: \"PieChart\", ...config });\n}\n\nexport function SankeyChart(\n  config: ChartSpecWithOptions<google.visualization.SankeyChartOptions>\n): Chart {\n  return lava.chart({ type: \"SankeyChart\", ...config });\n}\n\nexport function ScatterChart(\n  config: ChartSpecWithOptions<google.visualization.ScatterChartOptions>\n): Chart {\n  return lava.chart({ type: \"ScatterChart\", ...config });\n}\n\nexport function SteppedAreaChart(\n  config: ChartSpecWithOptions<google.visualization.SteppedAreaChartOptions>\n): Chart {\n  return lava.chart({ type: \"SteppedAreaChart\", ...config });\n}\n\nexport function TableChart(\n  config: ChartSpecWithOptions<google.visualization.TableOptions>\n): Chart {\n  return lava.chart({ type: \"TableChart\", ...config });\n}\n\nexport function TimelineChart(\n  config: ChartSpecWithOptions<google.visualization.TimelineOptions>\n): Chart {\n  return lava.chart({ type: \"TimelineChart\", ...config });\n}\n\nexport function TreeMapChart(\n  config: ChartSpecWithOptions<google.visualization.TreeMapOptions>\n): Chart {\n  return lava.chart({ type: \"TreeMapChart\", ...config });\n}\n\nexport function WordTreeChart(config: ChartSpecWithOptions<unknown>): Chart {\n  return lava.chart({ type: \"WordTreeChart\", ...config });\n}\n"],"mappings":"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","names":["import_mobx","debug","debug","debug"]}